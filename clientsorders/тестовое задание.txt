Тестовое задание
На разработку веб-приложения справочника на .NET Core/C#

Цель: разработать веб-приложение справочник клиентов и заказов с применением веб-фреймворка .NET Core и применением библиотеки на языке программирования (ЯП) C#
Стек:
1.	.NET Core = 2.1 и выше для бэкенда;
2.	Любая SQL БД.

Для работы вам потребуется:
1.	Visual Studio 2019 Community (бесплатная версия);
2.	Postman или любой другой REST-клиент;
3.	Браузер SQL для проверки наполнения БД.
 
Приложение должно иметь следующий функционал (фичи):
1.	Добавление клиентов при нажатии на «+» или соответствующий текст на ваше усмотрение;
2.	Удаление клиентов (Нужно предусмотреть, что происходит, если у клиента есть заказы);
3.	Изменение данных клиентов.
4.	Добавление заказа к клиенту при нажатии на «+» или соответствующий текст – На странице клиента
5.	Удаление заказов;
6.	Изменение данных заказов.
 
Наличие экранов (страниц):
1.	Список клиентов;
2.	Отдельный клиент (при клике на клиента). На этой странице также показывается список заказов клиента.
 
Список фич:
1.	Каждую сущность можно создать, изменить или удалить – для этого предусмотрите на всех экранах (страницах) соответствующие кнопки с иконками и/или текстом;
2.	При создании/изменении сущностей происходит валидация полей;
3.	Сущность Client содержит поля:
	a.	Name; (Обязательное к заполнению поле)
	b.	BirthDate; (Обязательное поле)
	c.	Inn; (10 и 12 значный, можно хранить в БД в качестве строки, либо числа. Нужно написать валидацию контрольного числа)
	d.	PhoneNumber; (Обязательное поле)
	e.	Email; (Необязательное поле, строка. Если заполнено стоит произвести валидацию)
4.	Сущность Order содержит поля:
	a.	Name; (Обязательное поле)
	b.	CreatedOn; (Обязательное поле, заполняется автоматически)
	c.	Status; (Обязательное поле, enum – ToDo, InProgress, Done)
	5.	Также стоит добавить дополнительные поля для связей в БД; (1 клиент ко многим заказам)

Требования:
1.	Проект должен быть выложен на GitHub в личной странице с публичным доступом или приватным доступом с инвайтом;
2.	Все операции с сущностями на серверной стороне должны выполняться через .NET Core, в т. ч. и загрузка списка клиентов и заказов при инициализации веб-приложения;
3.	База данных – любая SQL;
4.	Проект должен собираться на любой рабочей станции с установленной 
.NET Core 2.1 и выше;

Будет плюсом наличие:
1.	Простого REST-бэкенда на ASP.NET Core;
2.	Автотестов (можно совсем простые);
3.	Dependency Injection;
4.	Интерфейса Swagger;
5.	Выложенный прототип на Heroku или GitHub Pages;

Можно пропустить и не разрабатывать:
1.	Экран с формой регистрации;
2.	Страницу «О приложении»;
3.	Использование PR и CI/CD;
